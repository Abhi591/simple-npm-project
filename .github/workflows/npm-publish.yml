name: Publish to npm

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v' (e.g., v1.0.0, v2.3.1)

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # Specify the Node.js version you need

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Publish to npm with the latest tag
      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      
      # Step 5: Get version from the tag
      - name: Get version from tag
        id: get_version
        run: |
          # Get the current version from the Git tag
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          # Get the previous tag to determine changelog (if any)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0)
          echo "PREVIOUS_TAG=$PREVIOUS_TAG" >> $GITHUB_ENV

      # Step 6: Extract Release Notes from CHANGELOG.md
      - name: Extract Release Notes from Changelog
        id: changelog
        run: |
          VERSION=${{ env.VERSION }}
          
          # Extract the changelog entry for the version
          CHANGELOG_ENTRY=$(awk "/## \[$VERSION\]/ {flag=1} flag && /^##/ {flag=0} flag" CHANGELOG.md)
          
          # If no entry is found, use a fallback message
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG="No changes in this release."
          else
            CHANGELOG="$CHANGELOG_ENTRY"
          fi
          
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV

      # Step 7: Debug the Changelog (Optional, for verification)
      - name: Debug Changelog
        run: |
          echo "Changelog for version ${{ env.VERSION }}: ${{ env.CHANGELOG }}"

      # Step 8: Create GitHub Release (without checking if it exists)
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 9: Create Release Notes with Version and Changelog (Optional, for extra customization)
      - name: Create Release Notes with Changelog
        run: |
          VERSION="${{ env.VERSION }}"
          CHANGELOG="${{ env.CHANGELOG }}"
          
          # Use the GitHub CLI to create a release with the changelog
          gh release create $VERSION --title "Version $VERSION" --notes "## What's Changed\n\n${CHANGELOG}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
