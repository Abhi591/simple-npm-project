name: Publish to npm

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v' (e.g., v1.0.0, v2.3.1)

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Publish to npm
      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 5: Get version from the tag
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 6: Generate changelog from CHANGELOG.md
      - name: Extract Changelog Entry
        id: changelog
        run: |
          VERSION=${{ env.VERSION }}

          # Remove 'refs/tags/' prefix if it exists and also remove 'v' if present
          VERSION=${VERSION#refs/tags/}  # Removes refs/tags/
          VERSION=${VERSION#v}          # Removes 'v' if present (e.g., v2.23.0 -> 2.23.0)
          
          # Debugging: Print out the version we are searching for
          echo "Searching for version: $VERSION in CHANGELOG.md"
          
          # Debugging: Print contents of CHANGELOG.md (to confirm structure)
          echo "Contents of CHANGELOG.md:"
          cat CHANGELOG.md

          # Use awk to extract the changelog entry for the version
          CHANGELOG_ENTRY=$(awk -v version="\\[$VERSION\\]" '
            BEGIN {found=0}
            # Correctly match version surrounded by square brackets
            $0 ~ "## " version {found=1}  # Match version in square brackets
            found && $0 ~ "^##" {found=0}  # End extraction when next version header is found
            found {print}
          ' CHANGELOG.md)

          # If no entry is found, use a fallback message
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG="No changes in this release."
          else
            CHANGELOG="$CHANGELOG_ENTRY"
          fi
          
          # Debugging: Print the extracted changelog content
          echo "Extracted Changelog for version $VERSION: $CHANGELOG"

          # Save the changelog to the environment
          echo "CHANGELOG=$CHANGELOG" >> $GITHUB_ENV

      # Step 7: Debugging: Print the extracted changelog
      - name: Debug Extracted Changelog
        run: |
          echo "Extracted Changelog for version ${{ env.VERSION }}: ${{ env.CHANGELOG }}"

      # Step 8: Create Release with the Changelog
      - name: Create Release
        id: create_release
        uses: comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}  # Tag name is used as the version
          release_name: ${{ github.ref }}  # Release name based on the tag
          body: |
            ## What's Changed:
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

