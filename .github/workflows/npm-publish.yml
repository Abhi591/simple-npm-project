name: Publish to npm

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v' (e.g., v1.0.0, v2.3.1)

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Publish to npm
      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 5: Get version from the tag
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 6: Check if the release already exists
      - name: Check if Release Exists
        id: check_release
        run: |
          TAG_EXISTS=$(gh release view ${{ env.VERSION }} --json tagName --jq '.tagName' || echo "not found")
          echo "Release check result: $TAG_EXISTS"
          if [ "$TAG_EXISTS" != "not found" ]; then
            echo "Release exists, skipping creation."
            echo "RELEASE_EXISTS=true" >> $GITHUB_ENV
          else
            echo "Release does not exist, creating release."
            echo "RELEASE_EXISTS=false" >> $GITHUB_ENV

      # Step 7: Create GitHub Release if not exists
      - name: Create GitHub Release
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 8: Generate Release Notes and Create Release if necessary
      - name: Create Release Notes with Changelog
        if: steps.check_release.outputs.RELEASE_EXISTS == 'false'
        run: |
          VERSION="${{ env.VERSION }}"
          CHANGELOG="${{ env.CHANGELOG }}"
          gh release create $VERSION --title "Version $VERSION" --notes "## What's Changed\n\n${CHANGELOG}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
