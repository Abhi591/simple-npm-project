name: Publish to npm

on:
  push:
    tags:
      - 'v*'  # Trigger on any tag starting with 'v' (e.g., v1.0.0, v2.3.1)

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Publish to npm
      - name: Publish to npm
        run: |
          npm config set //registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}
          npm publish --tag latest
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 5: Get version from the tag
      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      # Step 6: Generate changelog from CHANGELOG.md
      - name: Extract Changelog Entry
        id: changelog
        run: |
          VERSION=${{ env.VERSION }}
          # Remove 'v' prefix if it exists and any refs/tags
          VERSION=${VERSION#refs/tags/}
          VERSION=${VERSION#v}
          
          echo "Searching for version: $VERSION"  # Debug line
          
          # Use awk to extract all entries between version header and next version header
          CHANGELOG_ENTRY=$(awk -v version="$VERSION" '
            BEGIN { found=0; buffer="" }
            $0 ~ "^## \\[" version "]" { 
              found=1
              print "Found version header: " $0 > "/dev/stderr"  # Debug line
              next 
            }
            found && $0 ~ "^## \\[" { exit }
            found && NF {
              if (buffer == "") buffer = $0
              else buffer = buffer "\n" $0
              print "Adding line to buffer: " $0 > "/dev/stderr"  # Debug line
            }
            END { print buffer }
          ' CHANGELOG.md)

          echo "Extracted entry: $CHANGELOG_ENTRY"  # Debug line

          # If no entry is found, use fallback message
          if [ -z "$CHANGELOG_ENTRY" ]; then
            CHANGELOG="No changes in this release."
          else
            # Escape newlines for GitHub Actions environment variable
            CHANGELOG="${CHANGELOG_ENTRY//$'\n'/%0A}"
          fi
          
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Add a debug step
      - name: Debug Version and Changelog
        run: |
          echo "Version being searched: ${{ env.VERSION }}"
          echo "Raw version after stripping: ${VERSION}"
          echo "Final Changelog: ${{ env.CHANGELOG }}"

      # Step 7: Debugging: Print the extracted changelog
      - name: Debug Extracted Changelog
        run: |
          echo "Extracted Changelog for version ${{ env.VERSION }}: ${{ env.CHANGELOG }}"

      # Step 8: Create Release with the Changelog
      - name: Create Release
        id: create_release
        uses: comnoco/create-release-action@v2.0.5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}  # Tag name is used as the version
          release_name: ${{ github.ref }}  # Release name based on the tag
          body: |
            ## What's Changed:
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false

